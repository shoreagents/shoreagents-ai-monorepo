generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model ManagementUser {
  id               String         @id @default(uuid())
  authUserId       String         @unique
  name             String
  role             ManagementRole @default(MANAGER)
  avatar           String?
  phone            String?
  department       String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  email            String         @unique
  coverPhoto       String?
  managedCompanies Company[]

  @@map("management_users")
}

model StaffUser {
  id                     String                  @id @default(uuid())
  authUserId             String                  @unique
  name                   String
  role                   StaffRole               @default(STAFF)
  avatar                 String?
  coverPhoto             String?
  createdAt              DateTime                @default(now())
  updatedAt              DateTime                @updatedAt
  email                  String                  @unique
  companyId              String?
  activityPosts          ActivityPost[]
  breaks                 Break[]
  documents              Document[]
  gamificationProfile    GamificationProfile?
  kudosGiven             Kudos[]                 @relation("KudosGiven")
  kudosReceived          Kudos[]                 @relation("KudosReceived")
  performanceMetrics     PerformanceMetric[]
  postComments           PostComment[]
  postReactions          PostReaction[]
  reviewsReceived        Review[]
  onboarding             StaffOnboarding?
  staff_personal_records staff_personal_records?
  profile                StaffProfile?
  company                Company?                @relation("CompanyStaff", fields: [companyId], references: [id])
  tasks                  Task[]
  ticketResponses        TicketResponse[]
  tickets                Ticket[]
  timeEntries            TimeEntry[]

  @@map("staff_users")
}

model StaffProfile {
  id                 String           @id @default(uuid())
  staffUserId        String           @unique
  phone              String?
  location           String?
  employmentStatus   EmploymentStatus @default(PROBATION)
  startDate          DateTime
  daysEmployed       Int              @default(0)
  currentRole        String
  salary             Decimal          @db.Decimal(10, 2)
  lastPayIncrease    DateTime?
  lastIncreaseAmount Decimal?         @db.Decimal(10, 2)
  totalLeave         Int              @default(12)
  usedLeave          Int              @default(0)
  vacationUsed       Int              @default(0)
  sickUsed           Int              @default(0)
  hmo                Boolean          @default(true)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  civilStatus        String?
  dateOfBirth        DateTime?
  gender             String?
  staffUser          StaffUser        @relation(fields: [staffUserId], references: [id], onDelete: Cascade)
  workSchedule       WorkSchedule[]

  @@map("staff_profiles")
}

model WorkSchedule {
  id        String       @id @default(uuid())
  profileId String
  dayOfWeek String
  startTime String
  endTime   String
  isWorkday Boolean      @default(true)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  profile   StaffProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("work_schedules")
}

model Task {
  id            String       @id @default(uuid())
  staffUserId   String
  title         String
  description   String?
  status        TaskStatus   @default(TODO)
  priority      TaskPriority @default(MEDIUM)
  source        TaskSource   @default(SELF)
  deadline      DateTime?
  completedAt   DateTime?
  timeSpent     Int?
  tags          String[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
  assignedTo    String?
  companyId     String?
  createdById   String?
  createdByType CreatorType  @default(STAFF)
  company       Company?     @relation(fields: [companyId], references: [id])
  staffUser     StaffUser    @relation(fields: [staffUserId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

model Break {
  id             String      @id @default(uuid())
  staffUserId    String
  type           BreakType
  awayReason     AwayReason?
  scheduledStart String?
  scheduledEnd   String?
  actualStart    DateTime?
  actualEnd      DateTime?
  duration       Int?
  notes          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  isLate         Boolean     @default(false)
  lateBy         Int?
  timeEntryId    String?
  staffUser      StaffUser   @relation(fields: [staffUserId], references: [id], onDelete: Cascade)
  time_entries   TimeEntry?  @relation(fields: [timeEntryId], references: [id])

  @@map("breaks")
}

model TimeEntry {
  id              String          @id @default(uuid())
  staffUserId     String
  clockIn         DateTime
  clockOut        DateTime?
  totalHours      Decimal?        @db.Decimal(5, 2)
  notes           String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  breaksScheduled Boolean         @default(false)
  clockOutReason  ClockOutReason?
  expectedClockIn DateTime?
  lateBy          Int?
  wasLate         Boolean         @default(false)
  breaks          Break[]
  staffUser       StaffUser       @relation(fields: [staffUserId], references: [id], onDelete: Cascade)

  @@map("time_entries")
}

model PerformanceMetric {
  id                String    @id @default(uuid())
  staffUserId       String
  date              DateTime  @default(now())
  mouseMovements    Int       @default(0)
  mouseClicks       Int       @default(0)
  keystrokes        Int       @default(0)
  activeTime        Int       @default(0)
  idleTime          Int       @default(0)
  screenTime        Int       @default(0)
  downloads         Int       @default(0)
  uploads           Int       @default(0)
  bandwidth         Int       @default(0)
  clipboardActions  Int       @default(0)
  filesAccessed     Int       @default(0)
  urlsVisited       Int       @default(0)
  tabsSwitched      Int       @default(0)
  productivityScore Int       @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  staffUser         StaffUser @relation(fields: [staffUserId], references: [id], onDelete: Cascade)

  @@map("performance_metrics")
}

model Review {
  id               String       @id @default(uuid())
  staffUserId      String
  type             ReviewType
  status           ReviewStatus @default(PENDING_APPROVAL)
  client           String
  reviewer         String
  reviewerTitle    String?
  submittedDate    DateTime     @default(now())
  evaluationPeriod String
  overallScore     Decimal      @db.Decimal(3, 1)
  previousScore    Decimal?     @db.Decimal(3, 1)
  answers          Json
  acknowledgedDate DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  staffUser        StaffUser    @relation(fields: [staffUserId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

model Ticket {
  id           String           @id @default(uuid())
  ticketId     String           @unique
  staffUserId  String
  title        String
  description  String
  category     TicketCategory
  priority     TicketPriority   @default(MEDIUM)
  status       TicketStatus     @default(OPEN)
  assignedTo   String?
  resolvedDate DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  attachments  String[]         @default([])
  responses    TicketResponse[]
  staffUser    StaffUser        @relation(fields: [staffUserId], references: [id], onDelete: Cascade)

  @@map("tickets")
}

model TicketResponse {
  id          String    @id @default(uuid())
  ticketId    String
  staffUserId String
  message     String
  role        String
  createdAt   DateTime  @default(now())
  staffUser   StaffUser @relation(fields: [staffUserId], references: [id], onDelete: Cascade)
  ticket      Ticket    @relation(fields: [ticketId], references: [id], onDelete: Cascade)

  @@map("ticket_responses")
}

model ActivityPost {
  id          String         @id @default(uuid())
  staffUserId String
  type        PostType
  content     String
  achievement Json?
  images      String[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  staffUser   StaffUser      @relation(fields: [staffUserId], references: [id], onDelete: Cascade)
  comments    PostComment[]
  reactions   PostReaction[]

  @@map("activity_posts")
}

model PostReaction {
  id          String       @id @default(uuid())
  postId      String
  staffUserId String
  type        ReactionType
  createdAt   DateTime     @default(now())
  post        ActivityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  staffUser   StaffUser    @relation(fields: [staffUserId], references: [id], onDelete: Cascade)

  @@unique([postId, staffUserId, type])
  @@map("post_reactions")
}

model PostComment {
  id          String       @id @default(uuid())
  postId      String
  staffUserId String
  content     String
  createdAt   DateTime     @default(now())
  post        ActivityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  staffUser   StaffUser    @relation(fields: [staffUserId], references: [id], onDelete: Cascade)

  @@map("post_comments")
}

model GamificationProfile {
  id               String      @id @default(uuid())
  staffUserId      String      @unique
  level            Int         @default(1)
  points           Int         @default(0)
  rank             Int?
  streak           Int         @default(0)
  tasksCompleted   Int         @default(0)
  performanceScore Int         @default(0)
  reviewRating     Decimal?    @db.Decimal(2, 1)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  staffUser        StaffUser   @relation(fields: [staffUserId], references: [id], onDelete: Cascade)
  badges           UserBadge[]

  @@map("gamification_profiles")
}

model UserBadge {
  id        String              @id @default(uuid())
  profileId String
  badgeType BadgeType
  earnedAt  DateTime            @default(now())
  profile   GamificationProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, badgeType])
  @@map("user_badges")
}

model Kudos {
  id        String    @id @default(uuid())
  fromId    String
  toId      String
  message   String
  createdAt DateTime  @default(now())
  from      StaffUser @relation("KudosGiven", fields: [fromId], references: [id], onDelete: Cascade)
  to        StaffUser @relation("KudosReceived", fields: [toId], references: [id], onDelete: Cascade)

  @@map("kudos")
}

model Document {
  id            String           @id @default(uuid())
  title         String
  category      DocumentCategory
  uploadedBy    String
  size          String
  fileUrl       String?
  content       String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  staffUserId   String
  source        DocumentSource   @default(STAFF)
  sharedWithAll Boolean          @default(false)
  sharedWith    String[]         @default([])
  staffUser     StaffUser        @relation(fields: [staffUserId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model Company {
  id               String          @id @default(uuid())
  companyName      String
  tradingName      String?         // Trading name if different from company name
  industry         String?
  location         String?
  billingEmail     String?
  bio              String?         // Company description
  website          String?
  phone            String?
  contractStart    DateTime?       // When they started with us
  isActive         Boolean         @default(true)
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  organizationId   String          @unique @default(cuid())
  logo             String?
  coverPhoto       String?         // Company cover banner
  accountManagerId String?
  clientUsers      ClientUser[]    @relation("CompanyUsers")
  accountManager   ManagementUser? @relation(fields: [accountManagerId], references: [id])
  staffUsers       StaffUser[]     @relation("CompanyStaff")
  tasks            Task[]

  @@map("company")
}

model ClientUser {
  id         String         @id @default(uuid())
  authUserId String         @unique
  name       String
  role       ClientRole     @default(MANAGER)
  avatar     String?
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  email      String         @unique
  companyId  String
  coverPhoto String?
  company    Company        @relation("CompanyUsers", fields: [companyId], references: [id], onDelete: Cascade)
  profile    ClientProfile?

  @@map("client_users")
}

model ClientProfile {
  id                    String     @id @default(uuid())
  clientUserId          String     @unique
  position              String?    // Their job title (CEO, Manager, etc.)
  department            String?    // Department (Operations, Marketing, etc.)
  directPhone           String?    // Direct line
  mobilePhone           String?    // Mobile number
  timezone              String?    // Their timezone
  bio                   String?    // Personal bio
  notifyTaskCreate      Boolean    @default(true)
  notifyTaskComplete    Boolean    @default(true)
  notifyReviews         Boolean    @default(true)
  notifyWeeklyReports   Boolean    @default(true)
  tasksCreated          Int        @default(0) // Auto-increment
  reviewsSubmitted      Int        @default(0) // Auto-increment
  lastLoginAt           DateTime?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  clientUser            ClientUser @relation(fields: [clientUserId], references: [id], onDelete: Cascade)

  @@map("client_profiles")
}

model StaffOnboarding {
  id                         String           @id @default(uuid())
  staffUserId                String           @unique
  sss                        String?
  tin                        String?
  philhealthNo               String?
  pagibigNo                  String?
  firstName                  String?
  middleName                 String?
  lastName                   String?
  gender                     String?
  civilStatus                String?
  dateOfBirth                DateTime?
  contactNo                  String?
  email                      String?
  emergencyContactName       String?
  emergencyContactNo         String?
  emergencyRelationship      String?
  validIdUrl                 String?
  birthCertUrl               String?
  nbiClearanceUrl            String?
  birForm2316Url             String?
  idPhotoUrl                 String?
  signatureUrl               String?
  policeClearanceUrl         String?
  certificateEmpUrl          String?
  sssDocUrl                  String?
  tinDocUrl                  String?
  philhealthDocUrl           String?
  pagibigDocUrl              String?
  personalInfoStatus         OnboardingStatus @default(PENDING)
  govIdStatus                OnboardingStatus @default(PENDING)
  documentsStatus            OnboardingStatus @default(PENDING)
  signatureStatus            OnboardingStatus @default(PENDING)
  emergencyContactStatus     OnboardingStatus @default(PENDING)
  personalInfoFeedback       String?
  govIdFeedback              String?
  documentsFeedback          String?
  signatureFeedback          String?
  emergencyContactFeedback   String?
  personalInfoVerifiedAt     DateTime?
  govIdVerifiedAt            DateTime?
  documentsVerifiedAt        DateTime?
  signatureVerifiedAt        DateTime?
  emergencyContactVerifiedAt DateTime?
  verifiedBy                 String?
  isComplete                 Boolean          @default(false)
  completionPercent          Int              @default(0)
  createdAt                  DateTime         @default(now())
  updatedAt                  DateTime         @updatedAt
  staffUser                  StaffUser        @relation(fields: [staffUserId], references: [id], onDelete: Cascade)

  @@map("staff_onboarding")
}

model staff_personal_records {
  id                    String    @id
  staffUserId           String    @unique
  sss                   String?
  tin                   String?
  philhealthNo          String?
  pagibigNo             String?
  emergencyContactName  String?
  emergencyContactNo    String?
  emergencyRelationship String?
  validIdUrl            String?
  birthCertUrl          String?
  nbiClearanceUrl       String?
  policeClearanceUrl    String?
  sssDocUrl             String?
  tinDocUrl             String?
  philhealthDocUrl      String?
  pagibigDocUrl         String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime
  staff_users           StaffUser @relation(fields: [staffUserId], references: [id], onDelete: Cascade)
}

enum ManagementRole {
  ADMIN
  MANAGER
}

enum StaffRole {
  STAFF
  TEAM_LEAD
}

enum EmploymentStatus {
  PROBATION
  REGULAR
  TERMINATED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  STUCK
  FOR_REVIEW
  COMPLETED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskSource {
  SELF
  CLIENT
  MANAGEMENT
}

enum CreatorType {
  STAFF
  CLIENT
  ADMIN
}

enum BreakType {
  MORNING
  LUNCH
  AFTERNOON
  AWAY
}

enum AwayReason {
  MEETING
  NURSE
  BATHROOM
  MANAGEMENT
  DOLE
  OTHER
}

enum ClockOutReason {
  END_OF_SHIFT
  EMERGENCY
  SICK
  EARLY_LEAVE_APPROVED
  INTERNET_ISSUE
  POWER_OUTAGE
  PERSONAL
  OTHER
}

enum ReviewType {
  MONTH_1
  MONTH_3
  MONTH_5
  RECURRING_6M
  AD_HOC
}

enum ReviewStatus {
  PENDING_APPROVAL
  APPROVED
  FINALIZED
  ACKNOWLEDGED
  ARCHIVED
}

enum TicketCategory {
  IT
  HR
  MANAGEMENT
  EQUIPMENT
  OTHER
  STATION
  SURROUNDINGS
  COMPENSATION
  TRANSPORT
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum PostType {
  ACHIEVEMENT
  MILESTONE
  KUDOS
  WIN
  CELEBRATION
  UPDATE
  ANNOUNCEMENT
}

enum ReactionType {
  LIKE
  LOVE
  CELEBRATE
  FIRE
  CLAP
  LAUGH
  POO
  ROCKET
  SHOCKED
  MIND_BLOWN
}

enum BadgeType {
  SPEEDSTER
  PERFECTIONIST
  FIRE
  EARLY_BIRD
  TEAM_PLAYER
  TOP_PERFORMER
  CONSISTENT
  INNOVATOR
}

enum DocumentCategory {
  CLIENT
  TRAINING
  PROCEDURE
  CULTURE
  SEO
  OTHER
}

enum DocumentSource {
  STAFF
  CLIENT
}

enum ClientRole {
  OWNER
  ADMIN
  MANAGER
  VIEWER
}

enum OnboardingStatus {
  PENDING
  SUBMITTED
  APPROVED
  REJECTED
}
