generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model posts {
  id         String   @id @default(dbgenerated("gen_random_uuid()"))
  userId     String
  userType   UserType
  userName   String
  userAvatar String?
  content    String
  images     String[] @default([])

  // Optional: Attach post to something (like "sharing thoughts on task")
  attachedTo String? // e.g., "TASK", "TICKET", "REVIEW"
  attachedId String?

  taggedUsers String[]     @default([])
  audience    PostAudience @default(ALL)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([userType])
  @@index([audience])
  @@index([taggedUsers], type: Gin)
  @@index([audience, createdAt(sort: Desc)])
}

model shared_activities {
  id           String       @id @default(dbgenerated("gen_random_uuid()"))
  userId       String
  userType     UserType
  userName     String
  userAvatar   String?
  activityType ActivityType
  activityId   String // ID of the activity being shared
  message      String? // Optional personal message about the achievement
  sharedAt     DateTime     @default(now())

  @@index([userId])
  @@index([userType])
  @@index([activityType])
  @@index([sharedAt(sort: Desc)])
}

model comments {
  id              String          @id @default(dbgenerated("gen_random_uuid()"))
  commentableType CommentableType
  commentableId   String
  userId          String
  userType        UserType
  userName        String
  userAvatar      String?
  content         String
  attachments     String[]        @default([])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  parentId        String? // For threaded replies
  isEdited        Boolean         @default(false)
  editedAt        DateTime?

  @@index([commentableType, commentableId])
  @@index([userId])
  @@index([parentId])
  @@index([commentableType, commentableId, createdAt])
}

model reactions {
  id            String        @id @default(dbgenerated("gen_random_uuid()"))
  reactableType ReactableType
  reactableId   String
  userId        String
  userType      UserType
  userName      String
  userAvatar    String?
  reactionType  ReactionType
  createdAt     DateTime      @default(now())

  // One user can only have ONE reaction type per thing (can change it, but only one at a time)
  @@unique([reactableType, reactableId, userId])
  @@index([reactableType, reactableId])
  @@index([userId])
  @@index([reactableType, reactableId, reactionType])
}

model staff_breaks {
  id             String              @id
  staffUserId    String
  type           BreakType
  awayReason     AwayReason?
  scheduledStart String?
  scheduledEnd   String?
  actualStart    DateTime?
  actualEnd      DateTime?
  duration       Int?
  notes          String?
  createdAt      DateTime            @default(now())
  updatedAt      DateTime
  isLate         Boolean             @default(false)
  lateBy         Int?
  timeEntryId    String?
  isPaused       Boolean?            @default(false)
  pauseUsed      Boolean?            @default(false)
  pausedAt       DateTime?           @db.Timestamp(6)
  pausedDuration Int?                @default(0)
  staff_users    staff_users         @relation(fields: [staffUserId], references: [id], onDelete: Cascade)
  time_entries   staff_time_entries? @relation(fields: [timeEntryId], references: [id])
}

model client_profiles {
  id                  String       @id
  clientUserId        String       @unique
  position            String?
  department          String?
  directPhone         String?
  mobilePhone         String?
  timezone            String?
  bio                 String?
  notifyTaskCreate    Boolean      @default(true)
  notifyTaskComplete  Boolean      @default(true)
  notifyReviews       Boolean      @default(true)
  notifyWeeklyReports Boolean      @default(true)
  tasksCreated        Int          @default(0)
  reviewsSubmitted    Int          @default(0)
  lastLoginAt         DateTime?
  createdAt           DateTime     @default(now())
  updatedAt           DateTime
  client_users        client_users @relation(fields: [clientUserId], references: [id], onDelete: Cascade)
}

model client_users {
  id                       String                     @id
  authUserId               String                     @unique
  name                     String
  role                     ClientRole                 @default(MANAGER)
  avatar                   String?
  createdAt                DateTime                   @default(now())
  updatedAt                DateTime
  email                    String                     @unique
  companyId                String
  coverPhoto               String?
  client_profiles          client_profiles?
  client_documents         client_documents[]
  client_tickets           client_tickets[]
  client_companies         client_companies           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  staff_interview_requests staff_interview_requests[]
  staff_tasks              staff_tasks[]
}

model client_companies {
  id                         String                       @id
  companyName                String
  industry                   String?
  location                   String?
  billingEmail               String?
  createdAt                  DateTime                     @default(now())
  updatedAt                  DateTime
  organizationId             String                       @unique
  logo                       String?
  accountManagerId           String?
  bio                        String?
  contractStart              DateTime?
  isActive                   Boolean                      @default(true)
  phone                      String?
  tradingName                String?
  website                    String?
  coverPhoto                 String?
  client_users               client_users[]
  client_documents           client_documents[]
  client_tickets             client_tickets[]
  management_users           management_users?            @relation(fields: [accountManagerId], references: [id])
  staff_employment_contracts staff_employment_contracts[]
  staff_job_acceptances      staff_job_acceptances[]
  staff_users                staff_users[]
  staff_tasks                staff_tasks[]
  staff_work_schedules       staff_work_schedules[]
}

model staff_documents {
  id          String                @id @default(dbgenerated("gen_random_uuid()"))
  staffUserId String
  title       String
  category    StaffDocumentCategory
  fileUrl     String?
  content     String? // Extracted text for AI search
  size        String
  uploadedBy  String // Staff name
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt

  // Share with their assigned client company automatically
  sharedWithCompany Boolean @default(true)

  staff_users staff_users @relation(fields: [staffUserId], references: [id], onDelete: Cascade)

  @@index([staffUserId])
  @@index([category])
}

model client_documents {
  id           String                 @id @default(dbgenerated("gen_random_uuid()"))
  clientUserId String
  companyId    String
  title        String
  category     ClientDocumentCategory
  fileUrl      String?
  content      String? // Extracted text for AI search
  size         String
  uploadedBy   String // Client name
  createdAt    DateTime               @default(now())
  updatedAt    DateTime               @updatedAt

  // Share with specific staff or all staff in company
  sharedWithAll Boolean  @default(false)
  sharedWith    String[] @default([]) // Staff IDs

  client_users     client_users     @relation(fields: [clientUserId], references: [id], onDelete: Cascade)
  client_companies client_companies @relation(fields: [companyId], references: [id], onDelete: Cascade)

  @@index([clientUserId])
  @@index([companyId])
  @@index([category])
}

model management_documents {
  id               String                     @id @default(dbgenerated("gen_random_uuid()"))
  managementUserId String
  title            String
  category         ManagementDocumentCategory
  fileUrl          String?
  content          String? // Extracted text for AI search
  size             String
  uploadedBy       String // Management name
  createdAt        DateTime                   @default(now())
  updatedAt        DateTime                   @updatedAt

  // Share with everyone or specific people
  sharedWithAll Boolean  @default(true) // Company-wide by default
  sharedWith    String[] @default([]) // Specific staff IDs (if not all)

  management_users management_users @relation(fields: [managementUserId], references: [id], onDelete: Cascade)

  @@index([managementUserId])
  @@index([category])
}

model staff_employment_contracts {
  id                    String                @id
  jobAcceptanceId       String                @unique
  staffUserId           String                @unique
  companyId             String
  employeeName          String
  employeeAddress       String
  contactType           String
  assignedClient        String
  position              String
  startDate             DateTime
  workSchedule          String
  basicSalary           Decimal               @db.Decimal(10, 2)
  deMinimis             Decimal               @db.Decimal(10, 2)
  totalMonthlyGross     Decimal               @db.Decimal(10, 2)
  hmoOffer              String
  paidLeave             String
  probationaryPeriod    String
  pageInitials          Json?
  finalSignatureUrl     String?
  pagesInitialed        Int                   @default(0)
  totalPages            Int                   @default(5)
  fullyInitialed        Boolean               @default(false)
  signed                Boolean               @default(false)
  signedAt              DateTime?
  adminApproved         Boolean               @default(false)
  adminApprovedAt       DateTime?
  adminApprovedBy       String?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime
  client_companies      client_companies      @relation(fields: [companyId], references: [id])
  staff_job_acceptances staff_job_acceptances @relation(fields: [jobAcceptanceId], references: [id], onDelete: Cascade)
  staff_users           staff_users           @relation(fields: [staffUserId], references: [id])
}

model staff_interview_requests {
  id                    String                 @id
  clientUserId          String
  bpocCandidateId       String
  candidateFirstName    String
  preferredTimes        Json
  clientNotes           String?
  createdAt             DateTime               @default(now())
  updatedAt             DateTime
  adminNotes            String?
  meetingLink           String?
  scheduledTime         DateTime?
  status                InterviewRequestStatus @default(PENDING)
  hireRequestedBy       String?
  hireRequestedAt       DateTime?
  clientPreferredStart  DateTime?
  finalStartDate        DateTime?
  offerSentAt           DateTime?
  offerResponseAt       DateTime?
  offerDeclineReason    String?
  workSchedule          Json?
  client_users          client_users           @relation(fields: [clientUserId], references: [id], onDelete: Cascade)
  staff_job_acceptances staff_job_acceptances?
}

model staff_job_acceptances {
  id                         String                      @id
  interviewRequestId         String                      @unique
  bpocCandidateId            String
  candidateEmail             String
  candidatePhone             String?
  position                   String
  companyId                  String
  acceptedByAdminId          String
  acceptedAt                 DateTime                    @default(now())
  signupEmailSent            Boolean                     @default(false)
  signupEmailSentAt          DateTime?
  staffUserId                String?                     @unique
  contractSigned             Boolean                     @default(false)
  contractSignedAt           DateTime?
  workDays                   String[]                    @default(["Monday", "Tuesday", "Wednesday", "Thursday", "Friday"])
  workStartTime              String                      @default("09:00")
  workEndTime                String                      @default("18:00")
  clientTimezone             String                      @default("UTC")
  isDefaultSchedule          Boolean                     @default(true)
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime
  staff_employment_contracts staff_employment_contracts?
  client_companies           client_companies            @relation(fields: [companyId], references: [id])
  staff_interview_requests   staff_interview_requests    @relation(fields: [interviewRequestId], references: [id], onDelete: Cascade)
  staff_users                staff_users?                @relation(fields: [staffUserId], references: [id])
}

model management_users {
  id                   String                 @id
  authUserId           String                 @unique
  name                 String
  role                 ManagementRole         @default(MANAGER)
  avatar               String?
  phone                String?
  department           Department
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  email                String                 @unique
  coverPhoto           String?
  client_companies     client_companies[]
  management_profiles  management_profiles?
  management_documents management_documents[]
  staff_tickets        staff_tickets[]
  client_tickets       client_tickets[]
  created_tickets      management_tickets[]   @relation("CreatedTickets")
  assigned_tickets     management_tickets[]   @relation("AssignedTickets")
}

model management_profiles {
  id                 String           @id
  managementUserId   String           @unique
  phone              String?
  timezone           String?          @default("Asia/Manila")
  startDate          DateTime
  daysEmployed       Int              @default(0)
  currentRole        String
  salary             Decimal?         @db.Decimal(10, 2)
  lastPayIncrease    DateTime?
  lastIncreaseAmount Decimal?         @db.Decimal(10, 2)
  totalLeave         Int              @default(12)
  usedLeave          Int              @default(0)
  vacationUsed       Int              @default(0)
  sickUsed           Int              @default(0)
  hmo                Boolean          @default(true)
  bio                String?
  responsibilities   String?
  createdAt          DateTime         @default(now())
  updatedAt          DateTime
  civilStatus        String?
  dateOfBirth        DateTime?
  gender             String?
  management_users   management_users @relation(fields: [managementUserId], references: [id], onDelete: Cascade)
}

model staff_salary_history {
  id              String   @id
  userId          String
  userType        String
  previousSalary  Decimal  @db.Decimal(10, 2)
  newSalary       Decimal  @db.Decimal(10, 2)
  increaseAmount  Decimal  @db.Decimal(10, 2)
  increasePercent Decimal? @db.Decimal(5, 2)
  reason          String?
  notes           String?
  approvedBy      String?
  effectiveDate   DateTime
  createdAt       DateTime @default(now())

  @@index([userId])
  @@index([effectiveDate])
  @@index([userId, effectiveDate])
}

/// This model or at least one of its fields has comments in the database, and requires an additional setup for migrations: Read more: https://pris.ly/d/database-comments
model notifications {
  id          String           @id @default(dbgenerated("(gen_random_uuid())::text"))
  userId      String
  type        NotificationType @default(TAG)
  title       String
  message     String
  postId      String?
  actionUrl   String?
  read        Boolean          @default(false)
  createdAt   DateTime         @default(now())
  readAt      DateTime?
  staff_users staff_users      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([postId], map: "idx_notifications_post")
  @@index([userId, createdAt(sort: Desc)], map: "idx_notifications_user_created")
  @@index([userId, read], map: "idx_notifications_user_read")
}

model staff_analytics {
  id                String      @id
  staffUserId       String
  date              DateTime    @default(now())
  mouseMovements    Int         @default(0)
  mouseClicks       Int         @default(0)
  keystrokes        Int         @default(0)
  activeTime        Int         @default(0)
  idleTime          Int         @default(0)
  screenTime        Int         @default(0)
  downloads         Int         @default(0)
  uploads           Int         @default(0)
  bandwidth         Int         @default(0)
  clipboardActions  Int         @default(0)
  filesAccessed     Int         @default(0)
  urlsVisited       Int         @default(0)
  tabsSwitched      Int         @default(0)
  productivityScore Int         @default(0)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime
  applicationsused  Json?       @default("[]")
  visitedurls       Json?       @default("[]")
  screenshoturls    Json?       @default("[]")
  staff_users       staff_users @relation(fields: [staffUserId], references: [id], onDelete: Cascade)
}

model staff_performance_reviews {
  id                 String       @id
  staffUserId        String
  type               ReviewType
  status             ReviewStatus @default(PENDING)
  client             String
  reviewer           String
  reviewerTitle      String?
  submittedDate      DateTime?
  evaluationPeriod   String
  overallScore       Decimal?     @db.Decimal(5, 2)
  acknowledgedDate   DateTime?
  createdAt          DateTime     @default(now())
  updatedAt          DateTime
  dueDate            DateTime
  ratings            Json?
  performanceLevel   String?
  strengths          String?
  improvements       String?
  additionalComments String?
  managementNotes    String?
  reviewedBy         String?
  reviewedDate       DateTime?
  staff_users        staff_users  @relation(fields: [staffUserId], references: [id], onDelete: Cascade)
}

model staff_offboarding {
  id                     String            @id
  staffUserId            String            @unique
  initiatedBy            String
  reason                 OffboardingReason
  reasonDetails          String?
  lastWorkingDate        DateTime
  offboardingNotes       String?
  status                 OffboardingStatus @default(INITIATED)
  exitInterviewCompleted Boolean           @default(false)
  exitInterviewData      String?
  equipmentReturned      Boolean           @default(false)
  accessRevoked          Boolean           @default(false)
  finalPaymentProcessed  Boolean           @default(false)
  clearanceIssued        Boolean           @default(false)
  clearanceDate          DateTime?
  clearanceSignatureUrl  String?
  createdAt              DateTime          @default(now())
  completedAt            DateTime?
  updatedAt              DateTime
  staff_users            staff_users       @relation(fields: [staffUserId], references: [id], onDelete: Cascade)

  @@index([lastWorkingDate])
  @@index([status])
}

model staff_onboarding {
  id                         String           @id
  staffUserId                String           @unique
  sss                        String?
  tin                        String?
  philhealthNo               String?
  pagibigNo                  String?
  firstName                  String?
  middleName                 String?
  lastName                   String?
  gender                     String?
  civilStatus                String?
  dateOfBirth                DateTime?
  contactNo                  String?
  email                      String?
  emergencyContactName       String?
  emergencyContactNo         String?
  emergencyRelationship      String?
  validIdUrl                 String?
  birthCertUrl               String?
  nbiClearanceUrl            String?
  birForm2316Url             String?
  idPhotoUrl                 String?
  signatureUrl               String?
  policeClearanceUrl         String?
  certificateEmpUrl          String?
  sssDocUrl                  String?
  tinDocUrl                  String?
  philhealthDocUrl           String?
  pagibigDocUrl              String?
  personalInfoStatus         OnboardingStatus @default(PENDING)
  govIdStatus                OnboardingStatus @default(PENDING)
  documentsStatus            OnboardingStatus @default(PENDING)
  signatureStatus            OnboardingStatus @default(PENDING)
  emergencyContactStatus     OnboardingStatus @default(PENDING)
  personalInfoFeedback       String?
  govIdFeedback              String?
  documentsFeedback          String?
  signatureFeedback          String?
  emergencyContactFeedback   String?
  personalInfoVerifiedAt     DateTime?
  govIdVerifiedAt            DateTime?
  documentsVerifiedAt        DateTime?
  signatureVerifiedAt        DateTime?
  emergencyContactVerifiedAt DateTime?
  verifiedBy                 String?
  isComplete                 Boolean          @default(false)
  completionPercent          Int              @default(0)
  createdAt                  DateTime         @default(now())
  updatedAt                  DateTime
  educationFeedback          String?
  educationStatus            OnboardingStatus @default(PENDING)
  educationVerifiedAt        DateTime?
  medicalCertUrl             String?
  medicalFeedback            String?
  medicalStatus              OnboardingStatus @default(PENDING)
  medicalVerifiedAt          DateTime?
  resumeFeedback             String?
  resumeStatus               OnboardingStatus @default(PENDING)
  resumeUrl                  String?
  resumeVerifiedAt           DateTime?
  bankAccountDetails         String?
  dataPrivacyConsentUrl      String?
  dataPrivacyFeedback        String?
  dataPrivacyStatus          OnboardingStatus @default(PENDING)
  dataPrivacyVerifiedAt      DateTime?
  diplomaTorUrl              String?
  staff_users                staff_users      @relation(fields: [staffUserId], references: [id], onDelete: Cascade)
}

model staff_personal_records {
  id                    String      @id
  staffUserId           String      @unique
  sss                   String?
  tin                   String?
  philhealthNo          String?
  pagibigNo             String?
  emergencyContactName  String?
  emergencyContactNo    String?
  emergencyRelationship String?
  validIdUrl            String?
  birthCertUrl          String?
  nbiClearanceUrl       String?
  policeClearanceUrl    String?
  sssDocUrl             String?
  tinDocUrl             String?
  philhealthDocUrl      String?
  pagibigDocUrl         String?
  birForm2316Url        String?
  idPhotoUrl            String?
  signatureUrl          String?
  certificateEmpUrl     String?
  medicalCertUrl        String?
  resumeUrl             String?
  employmentContractUrl String?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime
  staff_users           staff_users @relation(fields: [staffUserId], references: [id], onDelete: Cascade)
}

model staff_profiles {
  id                   String                 @id
  staffUserId          String                 @unique
  phone                String?
  location             String?
  timezone             String?                @default("Asia/Manila")
  employmentStatus     EmploymentStatus       @default(PROBATION)
  startDate            DateTime
  daysEmployed         Int                    @default(0)
  currentRole          String
  salary               Decimal                @db.Decimal(10, 2)
  lastPayIncrease      DateTime?
  lastIncreaseAmount   Decimal?               @db.Decimal(10, 2)
  totalLeave           Int                    @default(12)
  usedLeave            Int                    @default(0)
  vacationUsed         Int                    @default(0)
  sickUsed             Int                    @default(0)
  hmo                  Boolean                @default(true)
  createdAt            DateTime               @default(now())
  updatedAt            DateTime
  civilStatus          String?
  dateOfBirth          DateTime?
  gender               String?
  staff_users          staff_users            @relation(fields: [staffUserId], references: [id], onDelete: Cascade)
  staff_work_schedules staff_work_schedules[]
}

model staff_users {
  id                         String                      @id
  authUserId                 String                      @unique
  name                       String
  role                       StaffRole                   @default(STAFF)
  avatar                     String?
  coverPhoto                 String?
  createdAt                  DateTime                    @default(now())
  updatedAt                  DateTime
  email                      String                      @unique
  companyId                  String?
  active                     Boolean                     @default(true)
  staff_breaks               staff_breaks[]
  staff_documents            staff_documents[]
  staff_employment_contracts staff_employment_contracts?
  staff_job_acceptances      staff_job_acceptances?
  notifications              notifications[]
  staff_analytics            staff_analytics[]
  staff_performance_reviews  staff_performance_reviews[]
  staff_offboarding          staff_offboarding?
  staff_onboarding           staff_onboarding?
  staff_personal_records     staff_personal_records?
  staff_profiles             staff_profiles?
  client_companies           client_companies?           @relation(fields: [companyId], references: [id])
  staff_welcome_forms        staff_welcome_forms?
  staff_task_assignments     staff_task_assignments[]
  staff_tasks                staff_tasks[]
  staff_tickets              staff_tickets[]
  staff_time_entries         staff_time_entries[]
}

model staff_welcome_forms {
  id               String      @id
  staffUserId      String      @unique
  name             String
  client           String
  startDate        String
  favoriteFastFood String
  favoriteColor    String?
  favoriteMusic    String?
  favoriteMovie    String?
  favoriteBook     String?
  hobby            String?
  dreamDestination String?
  favoriteSeason   String?
  petName          String?
  favoriteSport    String?
  favoriteGame     String?
  favoriteQuote    String?
  funFact          String?
  additionalInfo   String?
  completed        Boolean     @default(false)
  submittedAt      DateTime    @default(now())
  createdAt        DateTime    @default(now())
  updatedAt        DateTime
  staff_users      staff_users @relation(fields: [staffUserId], references: [id], onDelete: Cascade)
}

model staff_subtasks {
  id          String      @id
  taskId      String
  title       String
  completed   Boolean     @default(false)
  order       Int         @default(0)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime
  completedAt DateTime?
  staff_tasks staff_tasks @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model staff_task_assignments {
  id          String      @id
  taskId      String
  staffUserId String
  createdAt   DateTime    @default(now())
  staff_users staff_users @relation(fields: [staffUserId], references: [id], onDelete: Cascade)
  staff_tasks staff_tasks @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([taskId, staffUserId])
}

model staff_task_responses {
  id            String      @id
  taskId        String
  content       String
  createdByType CreatorType
  createdById   String
  attachments   String[]    @default([])
  createdAt     DateTime    @default(now())
  staff_tasks   staff_tasks @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model staff_tasks {
  id                     String                   @id
  staffUserId            String?
  title                  String
  description            String?
  status                 TaskStatus               @default(TODO)
  priority               TaskPriority             @default(MEDIUM)
  source                 TaskSource               @default(SELF)
  deadline               DateTime?
  completedAt            DateTime?
  timeSpent              Int?
  tags                   String[]
  createdAt              DateTime                 @default(now())
  updatedAt              DateTime
  companyId              String?
  createdById            String?
  createdByType          CreatorType              @default(STAFF)
  attachments            String[]                 @default([])
  clientUserId           String?
  staff_subtasks         staff_subtasks[]
  staff_task_assignments staff_task_assignments[]
  staff_task_responses   staff_task_responses[]
  client_users           client_users?            @relation(fields: [clientUserId], references: [id])
  client_companies       client_companies?        @relation(fields: [companyId], references: [id])
  staff_users            staff_users?             @relation(fields: [staffUserId], references: [id], onDelete: Cascade)
}

model staff_tickets {
  id           String              @id @default(dbgenerated("gen_random_uuid()"))
  ticketId     String              @unique
  staffUserId  String
  title        String
  description  String
  category     StaffTicketCategory
  priority     TicketPriority      @default(MEDIUM)
  status       TicketStatus        @default(OPEN)
  assignedTo   String? // managementUserId
  department   Department?
  resolvedDate DateTime?
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt
  attachments  String[]            @default([])

  staff_users      staff_users       @relation(fields: [staffUserId], references: [id], onDelete: Cascade)
  management_users management_users? @relation(fields: [assignedTo], references: [id])

  @@index([staffUserId])
  @@index([assignedTo])
  @@index([status])
  @@index([category])
}

model client_tickets {
  id           String               @id @default(dbgenerated("gen_random_uuid()"))
  ticketId     String               @unique
  clientUserId String
  companyId    String
  title        String
  description  String
  category     ClientTicketCategory
  priority     TicketPriority       @default(MEDIUM)
  status       TicketStatus         @default(OPEN)
  assignedTo   String? // managementUserId (Account Manager)
  resolvedDate DateTime?
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt
  attachments  String[]             @default([])

  client_users     client_users      @relation(fields: [clientUserId], references: [id], onDelete: Cascade)
  client_companies client_companies  @relation(fields: [companyId], references: [id], onDelete: Cascade)
  management_users management_users? @relation(fields: [assignedTo], references: [id])

  @@index([clientUserId])
  @@index([companyId])
  @@index([assignedTo])
  @@index([status])
  @@index([category])
}

model management_tickets {
  id           String                   @id @default(dbgenerated("gen_random_uuid()"))
  ticketId     String                   @unique
  createdBy    String // managementUserId
  title        String
  description  String
  category     ManagementTicketCategory
  priority     TicketPriority           @default(MEDIUM)
  status       TicketStatus             @default(OPEN)
  assignedTo   String? // Another manager/admin
  department   Department?
  resolvedDate DateTime?
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  attachments  String[]                 @default([])

  creator  management_users  @relation("CreatedTickets", fields: [createdBy], references: [id], onDelete: Cascade)
  assignee management_users? @relation("AssignedTickets", fields: [assignedTo], references: [id])

  @@index([createdBy])
  @@index([assignedTo])
  @@index([status])
  @@index([category])
}

model staff_time_entries {
  id                   String                @id
  staffUserId          String
  workScheduleId       String?
  clockIn              DateTime
  clockOut             DateTime?
  totalHours           Decimal?              @db.Decimal(5, 2)
  notes                String?
  createdAt            DateTime              @default(now())
  updatedAt            DateTime
  breaksScheduled      Boolean               @default(false)
  clockOutReason       ClockOutReason?
  expectedClockIn      DateTime?
  wasLate              Boolean               @default(false)
  lateBy               Int?
  lateReason           LateReason?
  wasEarly             Boolean               @default(false)
  earlyBy              Int?
  wasEarlyClockOut     Boolean               @default(false)
  earlyClockOutBy      Int?
  workedFullShift      Boolean               @default(false)
  staff_breaks         staff_breaks[]
  staff_users          staff_users           @relation(fields: [staffUserId], references: [id], onDelete: Cascade)
  staff_work_schedules staff_work_schedules? @relation(fields: [workScheduleId], references: [id])
}

model staff_work_schedules {
  id                 String               @id
  profileId          String
  companyId          String?
  dayOfWeek          String
  startTime          String
  endTime            String
  timezone           String?              @default("Asia/Manila")
  shiftType          ShiftType?           @default(DAY_SHIFT)
  workLocation       WorkLocationType?    @default(WORK_FROM_HOME)
  isWorkday          Boolean              @default(true)
  notes              String?
  createdBy          String?
  lastModifiedBy     String?
  createdAt          DateTime             @default(now())
  updatedAt          DateTime
  staff_time_entries staff_time_entries[]
  staff_profiles     staff_profiles       @relation(fields: [profileId], references: [id], onDelete: Cascade)
  client_companies   client_companies?    @relation(fields: [companyId], references: [id])

  @@index([profileId])
  @@index([companyId])
}

enum AwayReason {
  MEETING
  NURSE
  BATHROOM
  MANAGEMENT
  DOLE
  OTHER
}

enum BreakType {
  MORNING
  LUNCH
  AFTERNOON
  AWAY
}

enum ClientRole {
  OWNER
  ADMIN
  MANAGER
  VIEWER
}

enum CommentableType {
  TICKET
  POST
  DOCUMENT
  ONBOARDING
  JOB_ACCEPTANCE
  TASK
  REVIEW
  TIME_ENTRY
  CONTRACT
  PERSONAL_RECORD
  OFFBOARDING
  STAFF_PROFILE
  PERFORMANCE_METRIC
}

enum ReactableType {
  TICKET
  POST
  DOCUMENT
  ONBOARDING
  JOB_ACCEPTANCE
  TASK
  REVIEW
  TIME_ENTRY
  CONTRACT
  PERSONAL_RECORD
  OFFBOARDING
  STAFF_PROFILE
  PERFORMANCE_METRIC
  COMMENT // Can react to comments too!
}

enum UserType {
  STAFF
  CLIENT
  MANAGEMENT
  SYSTEM
}

enum ClockOutReason {
  END_OF_SHIFT
  EMERGENCY
  SICK
  EARLY_LEAVE_APPROVED
  INTERNET_ISSUE
  POWER_OUTAGE
  PERSONAL
  OTHER
}

enum LateReason {
  TRAFFIC
  OVERSLEPT
  EMERGENCY
  POWER_OUTAGE
  INTERNET_ISSUE
  FAMILY_MATTER
  HEALTH_ISSUE
  TRANSPORTATION
  WEATHER
  OTHER
}

enum CreatorType {
  STAFF
  CLIENT
  ADMIN
}

enum Department {
  CEO_EXECUTIVE
  IT_DEPARTMENT
  HR_DEPARTMENT
  NURSE_DEPARTMENT
  RECRUITMENT_DEPARTMENT
  ACCOUNT_MANAGEMENT
  FINANCE_DEPARTMENT
  NERDS_DEPARTMENT
  OPERATIONS
}

enum StaffDocumentCategory {
  WORK_SAMPLE
  REPORT
  PRESENTATION
  TRAINING_CERT
  PROJECT
  OTHER
}

enum ClientDocumentCategory {
  TRAINING
  PROCEDURE
  CULTURE
  SEO
  CLIENT_SPECIFIC
  GUIDELINE
  OTHER
}

enum ManagementDocumentCategory {
  COMPANY_POLICY
  HR_FORM
  TRAINING_MATERIAL
  ANNOUNCEMENT
  PROCEDURE
  HANDBOOK
  OTHER
}

enum EmploymentStatus {
  PROBATION
  REGULAR
  TERMINATED
}

enum InterviewRequestStatus {
  PENDING
  APPROVED
  REJECTED
  SCHEDULED
  COMPLETED
  CANCELLED
  HIRE_REQUESTED
  OFFER_SENT
  OFFER_ACCEPTED
  OFFER_DECLINED
  HIRED
}

enum ManagementRole {
  ADMIN
  MANAGER
}

enum NotificationType {
  TAG
  MENTION
  COMMENT
  REACTION
  SYSTEM
}

enum OffboardingReason {
  RESIGNATION
  TERMINATION
  END_OF_CONTRACT
  MUTUAL_AGREEMENT
  RETIREMENT
  OTHER
}

enum OffboardingStatus {
  INITIATED
  PENDING_EXIT
  PROCESSING
  COMPLETED
  CANCELLED
}

enum OnboardingStatus {
  PENDING
  SUBMITTED
  APPROVED
  REJECTED
}

enum PostAudience {
  STAFF
  CLIENT
  MANAGEMENT
  ALL
}

enum ActivityType {
  ONBOARDING_COMPLETE
  PERFORMANCE_REVIEW
  MILESTONE_REACHED
  TASK_COMPLETED
  CERTIFICATION_EARNED
  ANNIVERSARY
  PROMOTION
  CONTRACT_SIGNED
  FIRST_WEEK_COMPLETE
  FIRST_MONTH_COMPLETE
}

enum ReactionType {
  LIKE
  LOVE
  CELEBRATE
  FIRE
  CLAP
  LAUGH
  POO
  ROCKET
  SHOCKED
  MIND_BLOWN
}

enum ReviewStatus {
  PENDING
  SUBMITTED
  UNDER_REVIEW
  COMPLETED
}

enum ReviewType {
  MONTH_1
  MONTH_3
  MONTH_5
  RECURRING
}

enum StaffRole {
  STAFF
  TEAM_LEAD
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskSource {
  SELF
  CLIENT
  MANAGEMENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  STUCK
  FOR_REVIEW
  COMPLETED
}

enum StaffTicketCategory {
  IT
  HR
  EQUIPMENT
  CLINIC
  MEETING_ROOM
  STATION
  SURROUNDINGS
  COMPENSATION
  TRANSPORT
  OTHER
}

enum ClientTicketCategory {
  ACCOUNT_SUPPORT
  STAFF_PERFORMANCE
  PURCHASE_REQUEST
  BONUS_REQUEST
  REFERRAL
  REPORTING_ISSUES
  SYSTEM_ACCESS
  GENERAL_INQUIRY
}

enum ManagementTicketCategory {
  ONBOARDING
  OFFBOARDING
  MAINTENANCE
  CLEANING
  FINANCE
  OPERATIONS
  RECRUITMENT
  COMPLIANCE
  OTHER
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ShiftType {
  DAY_SHIFT
  NIGHT_SHIFT
  MID_SHIFT
}

enum WorkLocationType {
  WORK_FROM_HOME
  OFFICE
  HYBRID
}
