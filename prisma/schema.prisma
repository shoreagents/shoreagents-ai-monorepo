generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// ============================================
// MANAGEMENT USERS (Shore Agents Staff)
// Links to Supabase auth.users
// ============================================
model ManagementUser {
  id           String         @id @default(uuid())
  authUserId   String         @unique  // Links to Supabase auth.users.id
  email        String         @unique
  name         String
  role         ManagementRole @default(MANAGER)
  avatar       String?
  coverPhoto   String?
  phone        String?
  department   String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  
  // Relations - Can manage multiple companies
  managedCompanies Company[]

  @@map("management_users")
}

// ============================================
// STAFF USERS (BPO Workers)
// Links to Supabase auth.users
// ============================================
model StaffUser {
  id                  String               @id @default(uuid())
  authUserId          String               @unique  // Links to Supabase auth.users.id
  email               String               @unique
  name                String
  role                StaffRole            @default(STAFF)
  avatar              String?
  coverPhoto          String?
  companyId           String?              // Links to Company
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  
  // Relations
  company             Company?             @relation("CompanyStaff", fields: [companyId], references: [id])
  profile             StaffProfile?
  tasks               Task[]
  breaks              Break[]
  timeEntries         TimeEntry[]
  performanceMetrics  PerformanceMetric[]
  reviewsReceived     Review[]
  tickets             Ticket[]
  ticketResponses     TicketResponse[]
  documents           Document[]
  activityPosts       ActivityPost[]
  postReactions       PostReaction[]
  postComments        PostComment[]
  gamificationProfile GamificationProfile?
  kudosGiven          Kudos[]              @relation("KudosGiven")
  kudosReceived       Kudos[]              @relation("KudosReceived")
  staffAssignments    StaffAssignment[]
  onboarding          StaffOnboarding?

  @@map("staff_users")
}

// ============================================
// STAFF PROFILE (BPO Worker Details)
// ============================================
model StaffProfile {
  id                 String           @id @default(uuid())
  staffUserId        String           @unique
  phone              String?
  location           String?
  client             String?
  accountManager     String?
  employmentStatus   EmploymentStatus @default(PROBATION)
  startDate          DateTime
  daysEmployed       Int              @default(0)
  currentRole        String
  salary             Decimal          @db.Decimal(10, 2)
  lastPayIncrease    DateTime?
  lastIncreaseAmount Decimal?         @db.Decimal(10, 2)
  totalLeave         Int              @default(12)
  usedLeave          Int              @default(0)
  vacationUsed       Int              @default(0)
  sickUsed           Int              @default(0)
  hmo                Boolean          @default(true)
  createdAt          DateTime         @default(now())
  updatedAt          DateTime         @updatedAt
  
  staffUser          StaffUser        @relation(fields: [staffUserId], references: [id], onDelete: Cascade)
  workSchedule       WorkSchedule[]

  @@map("staff_profiles")
}

model WorkSchedule {
  id        String       @id @default(uuid())
  profileId String
  dayOfWeek String
  startTime String
  endTime   String
  isWorkday Boolean      @default(true)
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
  profile   StaffProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("work_schedules")
}

// ============================================
// TASKS
// ============================================
model Task {
  id          String       @id @default(uuid())
  staffUserId String
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  source      TaskSource   @default(SELF)
  deadline    DateTime?
  completedAt DateTime?
  timeSpent   Int?
  tags        String[]
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  staffUser   StaffUser    @relation(fields: [staffUserId], references: [id], onDelete: Cascade)

  @@map("tasks")
}

// ============================================
// BREAKS
// ============================================
model Break {
  id             String      @id @default(uuid())
  staffUserId    String
  type           BreakType
  awayReason     AwayReason?
  scheduledStart String?
  scheduledEnd   String?
  actualStart    DateTime?
  actualEnd      DateTime?
  duration       Int?
  notes          String?
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  staffUser      StaffUser   @relation(fields: [staffUserId], references: [id], onDelete: Cascade)

  @@map("breaks")
}

// ============================================
// TIME TRACKING
// ============================================
model TimeEntry {
  id          String     @id @default(uuid())
  staffUserId String
  clockIn     DateTime
  clockOut    DateTime?
  totalHours  Decimal?   @db.Decimal(5, 2)
  notes       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  staffUser   StaffUser  @relation(fields: [staffUserId], references: [id], onDelete: Cascade)

  @@map("time_entries")
}

// ============================================
// PERFORMANCE METRICS
// ============================================
model PerformanceMetric {
  id                String    @id @default(uuid())
  staffUserId       String
  date              DateTime  @default(now())
  mouseMovements    Int       @default(0)
  mouseClicks       Int       @default(0)
  keystrokes        Int       @default(0)
  activeTime        Int       @default(0)
  idleTime          Int       @default(0)
  screenTime        Int       @default(0)
  downloads         Int       @default(0)
  uploads           Int       @default(0)
  bandwidth         Int       @default(0)
  clipboardActions  Int       @default(0)
  filesAccessed     Int       @default(0)
  urlsVisited       Int       @default(0)
  tabsSwitched      Int       @default(0)
  productivityScore Int       @default(0)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  staffUser         StaffUser @relation(fields: [staffUserId], references: [id], onDelete: Cascade)

  @@map("performance_metrics")
}

// ============================================
// REVIEWS
// ============================================
model Review {
  id               String       @id @default(uuid())
  staffUserId      String
  type             ReviewType
  status           ReviewStatus @default(PENDING_APPROVAL)
  client           String
  reviewer         String
  reviewerTitle    String?
  submittedDate    DateTime     @default(now())
  evaluationPeriod String
  overallScore     Decimal      @db.Decimal(3, 1)
  previousScore    Decimal?     @db.Decimal(3, 1)
  answers          Json
  acknowledgedDate DateTime?
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
  staffUser        StaffUser    @relation(fields: [staffUserId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

// ============================================
// SUPPORT TICKETS
// ============================================
model Ticket {
  id           String           @id @default(uuid())
  ticketId     String           @unique
  staffUserId  String
  title        String
  description  String
  category     TicketCategory
  priority     TicketPriority   @default(MEDIUM)
  status       TicketStatus     @default(OPEN)
  assignedTo   String?
  resolvedDate DateTime?
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  attachments  String[]         @default([])
  responses    TicketResponse[]
  staffUser    StaffUser        @relation(fields: [staffUserId], references: [id], onDelete: Cascade)

  @@map("tickets")
}

model TicketResponse {
  id          String    @id @default(uuid())
  ticketId    String
  staffUserId String
  message     String
  role        String
  createdAt   DateTime  @default(now())
  ticket      Ticket    @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  staffUser   StaffUser @relation(fields: [staffUserId], references: [id], onDelete: Cascade)

  @@map("ticket_responses")
}

// ============================================
// ACTIVITY FEED
// ============================================
model ActivityPost {
  id          String         @id @default(uuid())
  staffUserId String
  type        PostType
  content     String
  achievement Json?
  images      String[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  staffUser   StaffUser      @relation(fields: [staffUserId], references: [id], onDelete: Cascade)
  comments    PostComment[]
  reactions   PostReaction[]

  @@map("activity_posts")
}

model PostReaction {
  id          String       @id @default(uuid())
  postId      String
  staffUserId String
  type        ReactionType
  createdAt   DateTime     @default(now())
  post        ActivityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  staffUser   StaffUser    @relation(fields: [staffUserId], references: [id], onDelete: Cascade)

  @@unique([postId, staffUserId, type])
  @@map("post_reactions")
}

model PostComment {
  id          String       @id @default(uuid())
  postId      String
  staffUserId String
  content     String
  createdAt   DateTime     @default(now())
  post        ActivityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  staffUser   StaffUser    @relation(fields: [staffUserId], references: [id], onDelete: Cascade)

  @@map("post_comments")
}

// ============================================
// GAMIFICATION
// ============================================
model GamificationProfile {
  id               String      @id @default(uuid())
  staffUserId      String      @unique
  level            Int         @default(1)
  points           Int         @default(0)
  rank             Int?
  streak           Int         @default(0)
  tasksCompleted   Int         @default(0)
  performanceScore Int         @default(0)
  reviewRating     Decimal?    @db.Decimal(2, 1)
  createdAt        DateTime    @default(now())
  updatedAt        DateTime    @updatedAt
  staffUser        StaffUser   @relation(fields: [staffUserId], references: [id], onDelete: Cascade)
  badges           UserBadge[]

  @@map("gamification_profiles")
}

model UserBadge {
  id        String              @id @default(uuid())
  profileId String
  badgeType BadgeType
  earnedAt  DateTime            @default(now())
  profile   GamificationProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@unique([profileId, badgeType])
  @@map("user_badges")
}

model Kudos {
  id          String    @id @default(uuid())
  fromId      String
  toId        String
  message     String
  createdAt   DateTime  @default(now())
  from        StaffUser @relation("KudosGiven", fields: [fromId], references: [id], onDelete: Cascade)
  to          StaffUser @relation("KudosReceived", fields: [toId], references: [id], onDelete: Cascade)

  @@map("kudos")
}

// ============================================
// DOCUMENTS
// ============================================
model Document {
  id            String           @id @default(uuid())
  title         String
  category      DocumentCategory
  uploadedBy    String
  size          String
  fileUrl       String?
  content       String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  staffUserId   String
  source        DocumentSource   @default(STAFF)
  sharedWithAll Boolean          @default(false)
  sharedWith    String[]         @default([])
  staffUser     StaffUser        @relation(fields: [staffUserId], references: [id], onDelete: Cascade)

  @@map("documents")
}

// ============================================
// COMPANY (Organizations)
// ============================================
model Company {
  id               String            @id @default(uuid())
  organizationId   String            @unique @default(cuid())
  companyName      String
  logo             String?
  industry         String?
  location         String?
  billingEmail     String?
  accountManagerId String?
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  
  // Relations
  accountManager   ManagementUser?   @relation(fields: [accountManagerId], references: [id])
  clientUsers      ClientUser[]      @relation("CompanyUsers")
  staffUsers       StaffUser[]       @relation("CompanyStaff")
  staffAssignments StaffAssignment[]

  @@map("company")
}

model ClientUser {
  id                   String            @id @default(uuid())
  authUserId           String            @unique  // Links to Supabase auth.users.id
  companyId            String
  email                String            @unique
  name                 String
  role                 ClientRole        @default(MANAGER)
  avatar               String?
  coverPhoto           String?
  createdAt            DateTime          @default(now())
  updatedAt            DateTime          @updatedAt
  
  company              Company           @relation("CompanyUsers", fields: [companyId], references: [id], onDelete: Cascade)
  managedOffshoreStaff StaffAssignment[] @relation("ManagedBy")

  @@map("client_users")
}

model StaffAssignment {
  id          String      @id @default(uuid())
  staffUserId String
  companyId   String
  managerId   String?
  role        String?
  startDate   DateTime    @default(now())
  rate        Decimal?    @db.Decimal(10, 2)
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  company     Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  manager     ClientUser? @relation("ManagedBy", fields: [managerId], references: [id])
  staffUser   StaffUser   @relation(fields: [staffUserId], references: [id], onDelete: Cascade)

  @@unique([staffUserId, companyId])
  @@map("staff_assignments")
}

// ============================================
// ENUMS
// ============================================

enum ManagementRole {
  ADMIN
  MANAGER
}

enum StaffRole {
  STAFF
  TEAM_LEAD
}

enum EmploymentStatus {
  PROBATION
  REGULAR
  TERMINATED
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  STUCK
  FOR_REVIEW
  COMPLETED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskSource {
  SELF
  CLIENT
  MANAGEMENT
}

enum BreakType {
  MORNING
  LUNCH
  AFTERNOON
  AWAY
}

enum AwayReason {
  MEETING
  NURSE
  BATHROOM
  MANAGEMENT
  DOLE
  OTHER
}

enum ReviewType {
  MONTH_1
  MONTH_3
  MONTH_5
  RECURRING_6M
  AD_HOC
}

enum ReviewStatus {
  PENDING_APPROVAL
  APPROVED
  FINALIZED
  ACKNOWLEDGED
  ARCHIVED
}

enum TicketCategory {
  IT
  HR
  MANAGEMENT
  EQUIPMENT
  OTHER
  STATION
  SURROUNDINGS
  COMPENSATION
  TRANSPORT
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum PostType {
  ACHIEVEMENT
  MILESTONE
  KUDOS
  WIN
  CELEBRATION
  UPDATE
  ANNOUNCEMENT
}

enum ReactionType {
  LIKE
  LOVE
  CELEBRATE
  FIRE
  CLAP
  LAUGH
  POO
  ROCKET
  SHOCKED
  MIND_BLOWN
}

enum BadgeType {
  SPEEDSTER
  PERFECTIONIST
  FIRE
  EARLY_BIRD
  TEAM_PLAYER
  TOP_PERFORMER
  CONSISTENT
  INNOVATOR
}

enum DocumentCategory {
  CLIENT
  TRAINING
  PROCEDURE
  CULTURE
  SEO
  OTHER
}

enum DocumentSource {
  STAFF
  CLIENT
}

enum ClientRole {
  OWNER
  ADMIN
  MANAGER
  VIEWER
}

enum OnboardingStatus {
  PENDING
  SUBMITTED
  APPROVED
  REJECTED
}

// ============================================
// STAFF ONBOARDING (Document Management)
// ============================================
model StaffOnboarding {
  id                    String           @id @default(uuid())
  staffUserId           String           @unique
  
  // Government IDs & Numbers
  sss                   String?
  tin                   String?
  philhealthNo          String?
  pagibigNo             String?
  
  // Personal Info
  firstName             String?
  middleName            String?
  lastName              String?
  gender                String?
  civilStatus           String?
  dateOfBirth           DateTime?
  contactNo             String?
  email                 String?
  
  // Emergency Contact
  emergencyContactName  String?
  emergencyContactNo    String?
  emergencyRelationship String?
  
  // Document Upload URLs (Supabase Storage)
  validIdUrl            String?
  birthCertUrl          String?
  nbiClearanceUrl       String?
  birForm2316Url        String?
  idPhotoUrl            String?
  signatureUrl          String?
  policeClearanceUrl    String?
  certificateEmpUrl     String?
  sssDocUrl             String?
  tinDocUrl             String?
  philhealthDocUrl      String?
  pagibigDocUrl         String?
  
  // Verification Status (per section)
  personalInfoStatus    OnboardingStatus @default(PENDING)
  govIdStatus           OnboardingStatus @default(PENDING)
  documentsStatus       OnboardingStatus @default(PENDING)
  signatureStatus       OnboardingStatus @default(PENDING)
  emergencyContactStatus OnboardingStatus @default(PENDING)
  
  // Admin Feedback
  personalInfoFeedback  String?
  govIdFeedback         String?
  documentsFeedback     String?
  signatureFeedback     String?
  emergencyContactFeedback String?
  
  // Verification timestamps
  personalInfoVerifiedAt DateTime?
  govIdVerifiedAt        DateTime?
  documentsVerifiedAt    DateTime?
  signatureVerifiedAt    DateTime?
  emergencyContactVerifiedAt DateTime?
  verifiedBy             String?
  
  // Overall completion
  isComplete            Boolean  @default(false)
  completionPercent     Int      @default(0)
  
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  
  staffUser             StaffUser @relation(fields: [staffUserId], references: [id], onDelete: Cascade)
  
  @@map("staff_onboarding")
}
