// This is your Prisma schema file
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// =====================
// USER & PROFILE
// =====================

enum Role {
  STAFF
  TEAM_LEAD
  MANAGER
  ADMIN
  CLIENT
}

enum EmploymentStatus {
  PROBATION
  REGULAR
  TERMINATED
}

model User {
  id           String   @id @default(uuid())
  email        String   @unique
  name         String
  role         Role     @default(STAFF)
  passwordHash String
  avatar       String?
  coverPhoto   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  profile              Profile?
  tasks                Task[]
  breaks               Break[]
  timeEntries          TimeEntry[]
  performanceMetrics   PerformanceMetric[]
  reviewsReceived      Review[]
  tickets              Ticket[]
  ticketResponses      TicketResponse[]
  activityPosts        ActivityPost[]
  postReactions        PostReaction[]
  postComments         PostComment[]
  gamificationProfile  GamificationProfile?
  kudosGiven           Kudos[]                 @relation("KudosGiven")
  kudosReceived        Kudos[]                 @relation("KudosReceived")
  documents            Document[]
  staffAssignments     StaffAssignment[]       // Client assignments for offshore staff

  @@map("users")
}

model Profile {
  id              String           @id @default(uuid())
  userId          String           @unique
  user            User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  phone           String?
  location        String?
  client          String?
  accountManager  String?
  employmentStatus EmploymentStatus @default(PROBATION)
  startDate       DateTime
  daysEmployed    Int              @default(0)
  currentRole     String
  salary          Decimal          @db.Decimal(10, 2)
  lastPayIncrease DateTime?
  lastIncreaseAmount Decimal?      @db.Decimal(10, 2)
  
  // Leave credits
  totalLeave      Int              @default(12)
  usedLeave       Int              @default(0)
  vacationUsed    Int              @default(0)
  sickUsed        Int              @default(0)
  
  // Benefits
  hmo             Boolean          @default(true)
  
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt

  // Relations
  workSchedule    WorkSchedule[]

  @@map("profiles")
}

model WorkSchedule {
  id        String   @id @default(uuid())
  profileId String
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  dayOfWeek String   // "Monday", "Tuesday", etc.
  startTime String   // "09:00"
  endTime   String   // "17:00"
  isWorkday Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("work_schedules")
}

// =====================
// TASKS
// =====================

enum TaskStatus {
  TODO
  IN_PROGRESS
  STUCK
  FOR_REVIEW
  COMPLETED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskSource {
  SELF
  CLIENT
  MANAGEMENT
}

model Task {
  id          String       @id @default(uuid())
  userId      String
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title       String
  description String?
  status      TaskStatus   @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  source      TaskSource   @default(SELF)
  
  deadline    DateTime?
  completedAt DateTime?
  timeSpent   Int?         // in minutes
  
  tags        String[]     // Array of tags
  
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  @@map("tasks")
}

// =====================
// BREAKS
// =====================

enum BreakType {
  MORNING
  LUNCH
  AFTERNOON
  AWAY
}

enum AwayReason {
  MEETING
  NURSE
  BATHROOM
  MANAGEMENT
  DOLE
  OTHER
}

model Break {
  id          String      @id @default(uuid())
  userId      String
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type        BreakType
  awayReason  AwayReason?
  
  scheduledStart String?  // "10:00"
  scheduledEnd   String?  // "10:15"
  
  actualStart    DateTime?
  actualEnd      DateTime?
  duration       Int?      // in minutes
  
  notes       String?
  
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("breaks")
}

// =====================
// TIME TRACKING (Clock In/Out)
// =====================

model TimeEntry {
  id         String    @id @default(uuid())
  userId     String
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  clockIn    DateTime
  clockOut   DateTime?
  
  totalHours Decimal?  @db.Decimal(5, 2) // Calculated when clocked out
  notes      String?
  
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@map("time_entries")
}

// =====================
// PERFORMANCE
// =====================

model PerformanceMetric {
  id           String   @id @default(uuid())
  userId       String
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  date         DateTime @default(now())
  
  // Input tracking
  mouseMovements Int    @default(0)
  mouseClicks    Int    @default(0)
  keystrokes     Int    @default(0)
  
  // Time tracking
  activeTime     Int    @default(0) // minutes
  idleTime       Int    @default(0) // minutes
  screenTime     Int    @default(0) // minutes
  
  // Network & files
  downloads      Int    @default(0)
  uploads        Int    @default(0)
  bandwidth      Int    @default(0) // MB
  clipboardActions Int  @default(0)
  filesAccessed  Int    @default(0)
  
  // Browser
  urlsVisited    Int    @default(0)
  tabsSwitched   Int    @default(0)
  
  // Scores
  productivityScore Int @default(0) // 0-100
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("performance_metrics")
}

// =====================
// REVIEWS
// =====================

enum ReviewType {
  MONTH_1
  MONTH_3
  MONTH_5
  RECURRING_6M
  AD_HOC
}

enum ReviewStatus {
  PENDING
  ACKNOWLEDGED
  ARCHIVED
}

model Review {
  id             String       @id @default(uuid())
  userId         String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type           ReviewType
  status         ReviewStatus @default(PENDING)
  
  client         String
  reviewer       String
  reviewerTitle  String?
  
  submittedDate  DateTime     @default(now())
  evaluationPeriod String
  
  overallScore   Decimal      @db.Decimal(3, 1)
  previousScore  Decimal?     @db.Decimal(3, 1)
  
  answers        Json         // Store all Q&A as JSON
  
  acknowledgedDate DateTime?
  
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@map("reviews")
}

// =====================
// SUPPORT TICKETS
// =====================

enum TicketCategory {
  IT
  HR
  MANAGEMENT
  EQUIPMENT
  STATION
  SURROUNDINGS
  COMPENSATION
  TRANSPORT
  OTHER
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model Ticket {
  id          String          @id @default(uuid())
  ticketId    String          @unique // TKT-001 format
  userId      String
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  title       String
  description String
  category    TicketCategory
  priority    TicketPriority  @default(MEDIUM)
  status      TicketStatus    @default(OPEN)
  
  assignedTo  String?
  attachments String[]        @default([]) // URLs to uploaded files
  
  resolvedDate DateTime?
  
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relations
  responses   TicketResponse[]

  @@map("tickets")
}

model TicketResponse {
  id        String   @id @default(uuid())
  ticketId  String
  ticket    Ticket   @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  message   String
  role      String   // "Staff", "IT Specialist", etc.
  
  createdAt DateTime @default(now())

  @@map("ticket_responses")
}

// =====================
// ACTIVITY FEED (Social)
// =====================

enum PostType {
  ACHIEVEMENT
  MILESTONE
  KUDOS
  WIN
  CELEBRATION
  UPDATE
  ANNOUNCEMENT
}

model ActivityPost {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type        PostType
  content     String
  
  achievement Json?    // Badge info if applicable
  images      String[] // Array of image URLs
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  reactions   PostReaction[]
  comments    PostComment[]

  @@map("activity_posts")
}

enum ReactionType {
  LIKE
  LOVE
  CELEBRATE
  FIRE
  CLAP
  LAUGH
  POO
  ROCKET
  SHOCKED
  MIND_BLOWN
}

model PostReaction {
  id      String       @id @default(uuid())
  postId  String
  post    ActivityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  userId  String
  user    User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  type    ReactionType
  
  createdAt DateTime   @default(now())

  @@unique([postId, userId, type]) // One reaction type per user per post
  @@map("post_reactions")
}

model PostComment {
  id        String       @id @default(uuid())
  postId    String
  post      ActivityPost @relation(fields: [postId], references: [id], onDelete: Cascade)
  
  userId    String
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  content   String
  
  createdAt DateTime     @default(now())

  @@map("post_comments")
}

// =====================
// GAMIFICATION
// =====================

model GamificationProfile {
  id        String   @id @default(uuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  level     Int      @default(1)
  points    Int      @default(0)
  rank      Int?
  streak    Int      @default(0)
  
  tasksCompleted     Int @default(0)
  performanceScore   Int @default(0)
  reviewRating       Decimal? @db.Decimal(2, 1)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  badges    UserBadge[]

  @@map("gamification_profiles")
}

enum BadgeType {
  SPEEDSTER
  PERFECTIONIST
  FIRE
  EARLY_BIRD
  TEAM_PLAYER
  TOP_PERFORMER
  CONSISTENT
  INNOVATOR
}

model UserBadge {
  id        String   @id @default(uuid())
  profileId String
  profile   GamificationProfile @relation(fields: [profileId], references: [id], onDelete: Cascade)
  
  badgeType BadgeType
  earnedAt  DateTime  @default(now())

  @@unique([profileId, badgeType]) // One badge per type per user
  @@map("user_badges")
}

model Kudos {
  id        String   @id @default(uuid())
  fromId    String
  from      User     @relation("KudosGiven", fields: [fromId], references: [id], onDelete: Cascade)
  
  toId      String
  to        User     @relation("KudosReceived", fields: [toId], references: [id], onDelete: Cascade)
  
  message   String
  
  createdAt DateTime @default(now())

  @@map("kudos")
}

// =====================
// AI ASSISTANT
// =====================

enum DocumentCategory {
  CLIENT
  TRAINING
  PROCEDURE
  CULTURE
  SEO
  OTHER
}

enum DocumentSource {
  STAFF
  CLIENT
}

model Document {
  id          String           @id @default(uuid())
  userId      String
  user        User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  title       String
  category    DocumentCategory
  source      DocumentSource   @default(STAFF)  // NEW: Track if uploaded by STAFF or CLIENT
  uploadedBy  String           // User's name for display
  size        String
  fileUrl     String?
  content     String?          // For searchable text content
  
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  @@map("documents")
}

// =====================
// CLIENT ORGANIZATION
// =====================

enum ClientRole {
  OWNER      // CEO - Full control, billing, can delete company
  ADMIN      // Can manage all staff, add/remove client users
  MANAGER    // Can manage assigned staff only (e.g., Wendy)
  VIEWER     // Read-only access
}

model Client {
  id              String   @id @default(uuid())
  companyName     String   // "TechCorp Inc."
  industry        String?
  location        String?  // "San Francisco, CA"
  billingEmail    String?
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // Relations
  onshoreStaff    ClientUser[]        // CEO, Wendy (their internal employees)
  offshoreStaff   StaffAssignment[]   // Maria Santos (hired BPO workers)

  @@map("clients")
}

model ClientUser {
  id         String       @id @default(uuid())
  clientId   String
  client     Client       @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  email      String       @unique
  name       String       // "Wendy", "CEO Name"
  role       ClientRole   @default(MANAGER)
  
  passwordHash String
  avatar       String?
  
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  
  // What offshore staff do they manage?
  managedOffshoreStaff StaffAssignment[] @relation("ManagedBy")

  @@map("client_users")
}

model StaffAssignment {
  id        String   @id @default(uuid())
  
  // OFFSHORE Staff (Maria Santos from User table)
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Assigned to which client company
  clientId  String
  client    Client   @relation(fields: [clientId], references: [id], onDelete: Cascade)
  
  // ONSHORE manager (Wendy - optional)
  managerId String?
  manager   ClientUser? @relation("ManagedBy", fields: [managerId], references: [id], onDelete: SetNull)
  
  role      String?     // "Customer Support Specialist"
  startDate DateTime    @default(now())
  rate      Decimal?    @db.Decimal(10, 2) // Monthly rate
  
  isActive  Boolean     @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, clientId]) // Staff can only be assigned once per client
  @@map("staff_assignments")
}

