'use client';

import { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { 
  FileText, 
  Download, 
  CheckCircle, 
  Clock, 
  User, 
  Calendar,
  Building,
  DollarSign,
  MapPin,
  Phone,
  Mail,
  PenTool,
  AlertCircle
} from 'lucide-react';
import { toast } from 'sonner';

interface Contract {
  id: string;
  staffUserId: string;
  jobTitle: string;
  salary: number;
  currency: string;
  startDate: string;
  endDate?: string;
  workType: string;
  workArrangement: string;
  hmoStatus: boolean;
  benefits: string[];
  contractHtml: string;
  signed: boolean;
  signedAt?: string;
  createdAt: string;
  updatedAt: string;
  company: {
    companyName: string;
    address: string;
    phone: string;
    email: string;
  };
}

export default function StaffContractPage() {
  const [contract, setContract] = useState<Contract | null>(null);
  const [loading, setLoading] = useState(true);
  const [signing, setSigning] = useState(false);
  const [signature, setSignature] = useState('');

  useEffect(() => {
    fetchContract();
  }, []);

  const fetchContract = async () => {
    try {
      setLoading(true);
      const response = await fetch('/api/staff/contract');
      
      if (!response.ok) {
        throw new Error('Failed to fetch contract');
      }
      
      const data = await response.json();
      setContract(data);
    } catch (error) {
      console.error('Error fetching contract:', error);
      toast.error('Failed to load contract details');
    } finally {
      setLoading(false);
    }
  };

  const handleSignContract = async () => {
    if (!signature.trim()) {
      toast.error('Please provide your digital signature');
      return;
    }

    try {
      setSigning(true);
      const response = await fetch('/api/staff/contract/sign', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          signature: signature.trim(),
        }),
      });

      if (!response.ok) {
        throw new Error('Failed to sign contract');
      }

      toast.success('Contract signed successfully!');
      await fetchContract(); // Refresh contract data
    } catch (error) {
      console.error('Error signing contract:', error);
      toast.error('Failed to sign contract');
    } finally {
      setSigning(false);
    }
  };

  const handleDownloadPDF = () => {
    // TODO: Implement PDF download functionality
    toast.info('PDF download feature coming soon!');
  };

  if (loading) {
    return (
      <div className="container mx-auto p-6">
        <div className="flex items-center justify-center h-64">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
        </div>
      </div>
    );
  }

  if (!contract) {
    return (
      <div className="container mx-auto p-6">
        <Card className="border border-slate-700 bg-slate-800">
          <CardContent className="p-8">
            <div className="text-center">
              <div className="mx-auto mb-6 flex h-20 w-20 items-center justify-center rounded-full bg-blue-600/20">
                <FileText className="h-10 w-10 text-blue-400" />
              </div>
              <h3 className="text-2xl font-bold text-white mb-3">No Employment Contract Found</h3>
              <p className="text-lg text-slate-300 mb-4 max-w-md mx-auto">
                You don't have any employment contract to view at this time. Your contract will appear here once it's been generated by the admin.
              </p>
              <div className="bg-slate-700/50 rounded-lg p-4 border border-slate-600 max-w-md mx-auto">
                <h4 className="font-semibold text-white mb-2">What happens next?</h4>
                <ul className="text-sm text-slate-300 space-y-1 text-left">
                  <li>• Admin will generate your contract</li>
                  <li>• You'll receive a notification</li>
                  <li>• Contract will appear on this page</li>
                  <li>• You can review and sign it</li>
                </ul>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6 space-y-6">
      {/* Header */}
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">Employment Contract</h1>
          <p className="text-gray-600 mt-1">Review and sign your employment agreement</p>
        </div>
        <div className="flex items-center gap-3">
          <Badge variant={contract.signed ? "default" : "destructive"}>
            {contract.signed ? (
              <>
                <CheckCircle className="h-4 w-4 mr-1" />
                Signed
              </>
            ) : (
              <>
                <AlertCircle className="h-4 w-4 mr-1" />
                Pending Signature
              </>
            )}
          </Badge>
        </div>
      </div>

      {/* Contract Information */}
      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* Job Details */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Building className="h-5 w-5" />
              Job Details
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <label className="text-sm font-medium text-gray-500">Position</label>
              <p className="text-gray-900 font-medium">{contract.jobTitle}</p>
            </div>
            <div>
              <label className="text-sm font-medium text-gray-500">Salary</label>
              <p className="text-gray-900 font-medium">{contract.currency} {contract.salary.toLocaleString()}</p>
            </div>
            <div>
              <label className="text-sm font-medium text-gray-500">Work Type</label>
              <p className="text-gray-900">{contract.workType}</p>
            </div>
            <div>
              <label className="text-sm font-medium text-gray-500">Arrangement</label>
              <p className="text-gray-900">{contract.workArrangement}</p>
            </div>
          </CardContent>
        </Card>

        {/* Contract Terms */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Calendar className="h-5 w-5" />
              Contract Terms
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <label className="text-sm font-medium text-gray-500">Start Date</label>
              <p className="text-gray-900 font-medium">{new Date(contract.startDate).toLocaleDateString()}</p>
            </div>
            {contract.endDate && (
              <div>
                <label className="text-sm font-medium text-gray-500">End Date</label>
                <p className="text-gray-900">{new Date(contract.endDate).toLocaleDateString()}</p>
              </div>
            )}
            <div>
              <label className="text-sm font-medium text-gray-500">HMO Status</label>
              <p className="text-gray-900">{contract.hmoStatus ? 'Included' : 'Not Included'}</p>
            </div>
            {contract.signedAt && (
              <div>
                <label className="text-sm font-medium text-gray-500">Signed At</label>
                <p className="text-gray-900">{new Date(contract.signedAt).toLocaleString()}</p>
              </div>
            )}
          </CardContent>
        </Card>

        {/* Company Information */}
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Building className="h-5 w-5" />
              Company Information
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <label className="text-sm font-medium text-gray-500">Company</label>
              <p className="text-gray-900 font-medium">{contract.company.companyName}</p>
            </div>
            <div>
              <label className="text-sm font-medium text-gray-500">Address</label>
              <p className="text-gray-900">{contract.company.address}</p>
            </div>
            <div>
              <label className="text-sm font-medium text-gray-500">Phone</label>
              <p className="text-gray-900">{contract.company.phone}</p>
            </div>
            <div>
              <label className="text-sm font-medium text-gray-500">Email</label>
              <p className="text-gray-900">{contract.company.email}</p>
            </div>
          </CardContent>
        </Card>
      </div>

      {/* Benefits */}
      {contract.benefits && contract.benefits.length > 0 && (
        <Card>
          <CardHeader>
            <CardTitle>Benefits & Perks</CardTitle>
          </CardHeader>
          <CardContent>
            <ul className="list-disc list-inside space-y-1">
              {contract.benefits.map((benefit, index) => (
                <li key={index} className="text-gray-700">{benefit}</li>
              ))}
            </ul>
          </CardContent>
        </Card>
      )}

      {/* Contract HTML Content */}
      <Card>
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <FileText className="h-5 w-5" />
            Contract Document
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="border rounded-lg p-6 bg-gray-50">
            <div 
              className="prose max-w-none"
              dangerouslySetInnerHTML={{ __html: contract.contractHtml }}
            />
          </div>
        </CardContent>
      </Card>

      {/* Digital Signature Section */}
      {!contract.signed && (
        <Card>
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <PenTool className="h-5 w-5" />
              Digital Signature
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div>
              <label htmlFor="signature" className="block text-sm font-medium text-gray-700 mb-2">
                Please type your full name to sign this contract
              </label>
              <input
                id="signature"
                type="text"
                value={signature}
                onChange={(e) => setSignature(e.target.value)}
                placeholder="Enter your full name"
                className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              />
            </div>
            <div className="bg-yellow-50 border border-yellow-200 rounded-md p-4">
              <div className="flex">
                <AlertCircle className="h-5 w-5 text-yellow-400 mr-2 mt-0.5" />
                <div>
                  <h4 className="text-sm font-medium text-yellow-800">Important Notice</h4>
                  <p className="text-sm text-yellow-700 mt-1">
                    By signing this contract, you agree to all terms and conditions outlined above. 
                    This is a legally binding agreement.
                  </p>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>
      )}

      {/* Actions */}
      <Card>
        <CardHeader>
          <CardTitle>Actions</CardTitle>
        </CardHeader>
        <CardContent>
          <div className="flex items-center gap-4">
            <Button
              onClick={handleDownloadPDF}
              variant="outline"
              className="flex items-center gap-2"
            >
              <Download className="h-4 w-4" />
              Download PDF
            </Button>
            
            {!contract.signed ? (
              <Button
                onClick={handleSignContract}
                disabled={signing || !signature.trim()}
                className="flex items-center gap-2 bg-blue-600 hover:bg-blue-700"
              >
                {signing ? (
                  <>
                    <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white"></div>
                    Signing...
                  </>
                ) : (
                  <>
                    <PenTool className="h-4 w-4" />
                    Sign Contract
                  </>
                )}
              </Button>
            ) : (
              <div className="flex items-center gap-2 text-green-600">
                <CheckCircle className="h-4 w-4" />
                <span className="font-medium">Contract has been signed</span>
              </div>
            )}
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
